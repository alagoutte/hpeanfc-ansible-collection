#!/usr/bin/python
# -*- coding: utf-8 -*-

# (C) Copyright 2019-2023 Hewlett Packard Enterprise Development LP.
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = r'''
---
module: afc_dhcp_relay
version_added: "0.0.1"
short_description: Create or delete DHCP Relay configuration in the specified fabric.
description: >
    This module creates or deletes a DHCP Relay configuration in the specified fabric.
options:
    afc_ip:
        description: >
            IP address of the Aruba Fabric Composer.
        type: str
        required: true
    afc_username:
        description:
        - User account having permission to create VRF on the Aruba Fabric Composer
        type: str
        required: false
    afc_password:
        description:
        - Password of the user account
        type: str
        required: false
    auth_token:
        description: >
            Auth token from the create session playbook.
        type: str
        required: false
    operation:
        description: >
            Operation to be performed on the DHCP Relay configuration, create or delete.
        type: str
        required: true
    dhcp_relay_name:
        description: >
            Name of the DHCP Relay configuration to be created or deleted.
        type: str
        required: true
    dhcp_relay_data:
        description: >
            Dictionary containing mandatory details to create a DHCP relay. Required for create and not required for delete.
        type: dict
        required: false
author: Aruba Networks (@ArubaNetworks)
'''

EXAMPLES = r'''
-   name: Create DHCP Relay configuration
    arubanetworks.afc.afc_dhcp_relay:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        dhcp_relay_name: "Test-DHCP_Relay"
        operation: "create"
        dhcp_relay_data:
            fabrics:
                - "Test-Fabric"
            vlans: "251"
            ipv6_dhcp_mcast_server_addresses: []
            ipv6_dhcp_server_addresses: []
            ipv4_dhcp_server_addresses:
                - "1.2.3.4"

-   name: Delete DHCP Relay configuration
    arubanetworks.afc.afc_dhcp_relay:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        dhcp_relay_name: "Test-DHCP_Relay"
        operation: "delete"
'''


RETURN = r'''
message:
    description: The output generated by the module
    type: str
    returned: always
    sample: "Successfully completed configuration"
status:
    description: True or False depending on the action taken
    type: bool
    returned: always
    sample: True
changed:
    description: True or False if something has been changed or not
    type: bool
    returned: always
    sample: True
'''

from pyafc.services import dhcp_relay
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.arubanetworks.afc.plugins.module_utils.afc import instantiate_afc_object


def main():
    module_args = dict(
        afc_ip=dict(type="str", required=True),
        afc_username=dict(type="str", required=False),
        afc_password=dict(type="str", required=False),
        auth_token=dict(type="str", required=False),
        operation=dict(type="str", required=True),
        dhcp_relay_name=dict(type="str", required=True),
        dhcp_relay_data=dict(type="dict", required=False)
    )

    ansible_module = AnsibleModule(
        argument_spec=module_args, supports_check_mode=True
    )

    # Get playbook's arguments
    token = None
    ip = ansible_module.params["afc_ip"]
    if 'afc_username' in list(ansible_module.params.keys()):
        username = ansible_module.params["afc_username"]
    if 'afc_password' in list(ansible_module.params.keys()):
        password = ansible_module.params["afc_password"]
    if 'auth_token' in list(ansible_module.params.keys()):
        token = ansible_module.params["auth_token"]
    dhcp_relay_name = ansible_module.params["dhcp_relay_name"]
    operation = ansible_module.params["operation"]
    if 'dhcp_relay_data' in list(ansible_module.params.keys()):
        dhcp_relay_data = ansible_module.params["dhcp_relay_data"]

    if token is not None:
        data = {
            "ip": ip,
            "auth_token": token
        }
    else:
        data = {
            "ip": ip,
            "username": username,
            "password": password
        }

    afc_instance = instantiate_afc_object(data=data)

    result = dict(changed=False)

    if ansible_module.check_mode:
        ansible_module.exit_json(**result)

    status = False
    changed = False
    message = ""

    if operation == 'create':
        dhcp_relay_instance = dhcp_relay.DhcpRelay(afc_instance.client, name=dhcp_relay_name, **dhcp_relay_data)
        message, status, changed = dhcp_relay_instance.create_dhcp_relay(**dhcp_relay_data)
    elif operation == 'delete':
        dhcp_relay_instance = dhcp_relay.DhcpRelay(afc_instance.client, name=dhcp_relay_name)
        message, status, changed = dhcp_relay_instance.delete_dhcp_relay()

    result['message'] = message
    result['status'] = status
    result['changed'] = changed

    # Disconnect session if username and password are passed
    if username and password:
        afc_instance.disconnect()

    # Exit
    if status:
        ansible_module.exit_json(changed=changed, msg=message)
    else:
        ansible_module.fail_json(changed=changed, msg=message)


if __name__ == "__main__":
    main()
