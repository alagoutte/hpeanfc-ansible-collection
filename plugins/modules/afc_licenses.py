#!/usr/bin/python

# (C) Copyright 2020-2025 Hewlett Packard Enterprise Development LP.
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)


DOCUMENTATION = r"""
---
module: afc_licenses
version_added: "0.0.1"
short_description: Create or delete a licenses in AFC.
description: >
    This module creates or deletes a licenses in AFC.
options:
    afc_ip:
        description: >
            IP address of the HPE ANW Fabric Composer.
        type: str
        required: true
    afc_username:
        description: >
            User account having permission to push licenses on the
            HPE ANW Fabric Composer
        type: str
        required: false
    afc_password:
        description:
        - Password of the user account
        type: str
        required: false
    auth_token:
        description: >
            Auth token from the create session playbook.
        type: str
        required: false
    operation:
        description: >
            Operation to be performed on the license, create or delete.
        type: str
        choices:
            - create
            - delete
        required: true
    data:
        description: >
            Data of licenses as depicted in the example.
        type: dict
        suboptions:
            license:
                description: >
                   License provided by Aruba.
                   Required for 'create'
                type: str
                required: false
            license_key:
                description: >
                    License key found in AFC WebUI.
                    Required for 'delete'
                type: str
                required: false
        required: true

author: Aruba Networks (@ArubaNetworks)
"""

EXAMPLES = r"""
-   name: Push new license
    arubanetworks.afc.afc_licenses:
        afc_ip: "10.10.10.10"
        afc_username: "admin"
        afc_password: "server"
        operation: create
        data:
            license: {<license provided by HPE>}

-   name: Delete license
    arubanetworks.afc.afc_licenses:
        afc_ip: "10.10.10.10"
        afc_username: "admin"
        afc_password: "server"
        operation: delete
        data:
            license_key: ABCD12345DEF
"""


RETURN = r"""
message:
    description: The output generated by the module
    type: str
    returned: always
    sample: "Successfully completed configuration"
status:
    description: True or False depending on the action taken
    type: bool
    returned: always
    sample: True
changed:
    description: True or False if something has been changed or not
    type: bool
    returned: always
    sample: True
"""

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.arubanetworks.afc.plugins.module_utils.afc import (
    instantiate_afc_object,
)


def main():
    module_args = {
        "afc_ip": {"type": "str", "required": True},
        "afc_username": {"type": "str", "required": False},
        "afc_password": {"type": "str", "required": False},
        "auth_token": {"type": "str", "required": False},
        "operation": {"type": "str", "required": True},
        "data": {"type": "dict", "required": False},
    }

    ansible_module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True,
    )

    # Get playbook's arguments
    token = None
    ip = ansible_module.params["afc_ip"]
    if "afc_username" in list(ansible_module.params.keys()):
        username = ansible_module.params["afc_username"]
    if "afc_password" in list(ansible_module.params.keys()):
        password = ansible_module.params["afc_password"]
    if "auth_token" in list(ansible_module.params.keys()):
        token = ansible_module.params["auth_token"]
    operation = ansible_module.params["operation"]
    data = ansible_module.params["data"]

    if token is not None:
        auth_data = {"ip": ip, "auth_token": token}
    else:
        auth_data = {"ip": ip, "username": username, "password": password}

    result = {"changed": False}

    if ansible_module.check_mode:
        ansible_module.exit_json(**result)

    status = False
    changed = False
    message = ""

    afc_instance = instantiate_afc_object(data=auth_data)

    if afc_instance.afc_connected:

        if operation == "create":
            message, status, changed = afc_instance.push_license(
                data["license"],
            )
        elif operation == "delete":
            message, status, changed = afc_instance.delete_license(
                data["license_key"],
            )
        else:
            message = "Operation not supported - No action taken"

        # Disconnect session if username and password are passed
        if username and password:
            afc_instance.disconnect()
    else:
        message = "Not connected to AFC"

    result["message"] = message
    result["status"] = status
    result["changed"] = changed

    # Exit
    if status:
        ansible_module.exit_json(changed=changed, msg=message)
    else:
        ansible_module.fail_json(changed=changed, msg=message)


if __name__ == "__main__":
    main()
