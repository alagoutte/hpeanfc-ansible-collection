#!/usr/bin/python

# (C) Copyright 2020-2025 Hewlett Packard Enterprise Development LP.
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)


DOCUMENTATION = r"""
---
module: afc_aaa
short_description: Create or delete an AAA configuration
description: >
    This module creates or deletes an AAA configuration
version_added: "0.0.1"
options:
    afc_ip:
        description:
        - IP address of the HPE ANW Fabric Composer
        type: str
        required: true
    afc_username:
        description:
        - User account having write permission on the HPE ANW Fabric Composer
        type: str
        required: false
    afc_password:
        description:
        - Password of the user account
        type: str
        required: false
    auth_token:
        description: >
            Auth token from the create session playbook.
        type: str
        required: false
    operation:
        description:
        - Operation to be performed on the AAA configuration, create or delete
        type: str
        choices:
            - create
            - delete
        required: true
    data:
        description: >
            The radius configuration data for create operation. Structure is
            provided in the example
        type: dict
        suboptions:
            name:
                description: Radius Configuration name
                type: str
                required: true
            description:
                description: Radius Configuration description
                type: str
                required: true
            config:
                description: Radius configuration
                type: dict
                required: true
                suboptions:
                    name:
                        description: Radius Config name
                        type: str
                        required: true
                    secret:
                        description: Radius secret
                        type: str
                        required: true
                    server:
                        description: Radius Server IP Address
                        type: str
                        required: true
                    port:
                        description: Radius Port
                        type: int
                        required: true
        required: true
author: Aruba Networks (@ArubaNetworks)
"""


EXAMPLES = r"""
-   name: Create AAA Radius config using username and password
    arubanetworks.afc.afc_aaa:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        operation: "create"
        data:
            name: "Radius-Test"
            config:
                secret: "Test"
                server: "192.16.56.12"
                port: 1812


-   name: Delete AAA Radius config using username and password
    arubanetworks.afc.afc_aaa:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        operation: "delete"
        data:
            name: "Radius-Test"

-   name: Create AAA Radius config using token
    arubanetworks.afc.afc_aaa:
        afc_ip: "10.10.10.10"
        auth_token: "xxlkjlsdfluwoeirkjlkjsldjjjlkj23423ljlkj"
        operation: "create"
        data:
            name: "Radius-Test"
            config:
                secret: "Test"
                server: "192.16.56.12"
                port: 1812

-   name: Delete AAA Radius config using token
    arubanetworks.afc.afc_aaa:
        afc_ip: "10.10.10.10"
        auth_token: "xxlkjlsdfluwoeirkjlkjsldjjjlkj23423ljlkj"
        operation: "delete"
        data:
            name: "Radius-Test"
"""


RETURN = r"""
message:
    description: The output generated by the module
    type: str
    returned: always
    sample: "Successfully completed configuration"
status:
    description: True or False depending on the action taken
    type: bool
    returned: always
    sample: True
changed:
    description: True or False if something has been changed or not
    type: bool
    returned: always
    sample: True
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.arubanetworks.afc.plugins.module_utils.afc import (
    instantiate_afc_object,
)
from pyafc.services import radius


def main():
    module_args = {
        "afc_ip": {"type": "str", "required": True},
        "afc_username": {"type": "str", "required": False},
        "afc_password": {"type": "str", "required": False},
        "auth_token": {"type": "str", "required": False},
        "operation": {"type": "str", "required": True},
        "data": {"type": "dict", "required": False},
    }

    ansible_module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True,
    )

    # Get playbook"s arguments
    token = None
    ip = ansible_module.params["afc_ip"]
    if "afc_username" in list(ansible_module.params.keys()):
        username = ansible_module.params["afc_username"]
    if "afc_password" in list(ansible_module.params.keys()):
        password = ansible_module.params["afc_password"]
    if "auth_token" in list(ansible_module.params.keys()):
        token = ansible_module.params["auth_token"]
    operation = ansible_module.params["operation"]
    data = ansible_module.params["data"]

    if token is not None:
        auth_data = {
            "ip": ip,
            "auth_token": token,
        }
    else:
        auth_data = {
            "ip": ip,
            "username": username,
            "password": password,
        }

    afc_instance = instantiate_afc_object(data=auth_data)

    result = {"changed": False}

    if ansible_module.check_mode:
        ansible_module.exit_json(**result)

    status = False
    changed = False
    message = ""

    if afc_instance.afc_connected:
        radius_instance = radius.Radius(
            afc_instance.client,
            name=data["name"],
        )
        if operation == "create":
            message, status, changed = radius_instance.create_radius(**data)
        elif operation == "delete":
            if radius_instance.uuid:
                message, status, changed = radius_instance.delete_radius()
            else:
                message = "Radius Server does not exist - No action taken"
        # Disconnect session if username and password are passed
        if username and password:
            afc_instance.disconnect()
    else:
        message = "Not connected to AFC"

    result["message"] = message
    result["status"] = status
    result["changed"] = changed

    # Exit
    if status:
        ansible_module.exit_json(changed=changed, msg=message)
    else:
        ansible_module.fail_json(changed=changed, msg=message)


if __name__ == "__main__":
    main()
