#!/usr/bin/python

# (C) Copyright 2020-2025 Hewlett Packard Enterprise Development LP.
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)


DOCUMENTATION = r"""
---
module: afc_ntp
version_added: "0.0.1"
short_description: Create or delete a NTP configuration in the fabric.
description: >
    This module creates or deletes a NTP configuration in the fabric.
options:
    afc_ip:
        description: >
            IP address of the HPE ANW Fabric Composer.
        type: str
        required: true
    afc_username:
        description:
        - User account having write permission on the HPE ANW Fabric Composer
        type: str
        required: false
    afc_password:
        description:
        - Password of the user account
        type: str
        required: false
    auth_token:
        description: >
            Auth token from the create session playbook.
        type: str
        required: false
    operation:
        description: >
            Operation to be performed on the NTP configuration,
            create or delete.
        type: str
        choices:
            - create
            - delete
        required: true
    data:
        description: >
            Data of NTP configuration as depicted in the example.
            Required for create operation and not required for delete.
            Structure is provided in the example.
        type: dict
        suboptions:
            name:
                description: NTP Config name
                type: str
                required: true
            description:
                description: NTP Config description
                type: str
                required: false
            servers:
                description: NTP Servers to be used
                type: list
                elements: dict
                suboptions:
                    server:
                        description: NTP Server IP Address
                        type: str
                        required: true
                    burst_mode:
                        description: >
                            Type of the burst mode to use (if any).
                        type: str
                        choices:
                            - burst
                            - iburst
                        required: false
                    prefer:
                        description: >
                            Preference flag to suggest for this association.
                        type: bool
                        default: true
                        required: false
                required: true
            fabrics:
                description: List of Fabrics
                type: list
                elements: str
                required: false
            switches:
                description: List of Switches
                type: list
                elements: str
                required: false
        required: true
author: Aruba Networks (@ArubaNetworks)
"""

EXAMPLES = r"""
-   name: Create NTP configuration using username and password
    arubanetworks.afc.afc_ntp:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        operation: "create"
        data:
            name: "Test-NTP"
            fabrics:
                - "Test-Fabric"
            servers:
                -   server: "10.100.100.111"
                    burst_mode: "iburst"
                    prefer: True

-   name: Delete NTP configuration using username and password
    arubanetworks.afc.afc_ntp:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        operation: "delete"
        data:
            name: "Test-NTP"

-   name: Create NTP configuration using token
    arubanetworks.afc.afc_ntp:
        afc_ip: "10.10.10.10"
        auth_token: "xxlkjlsdfluwoeirkjlkjsldjjjlkj23423ljlkj"
        operation: "create"
        data:
            name: "Test-NTP"
            servers:
                -   server: "10.100.100.111"
                    burst_mode: "iburst"
                    prefer: True

-   name: Delete NTP configuration using token
    arubanetworks.afc.afc_ntp:
        afc_ip: "10.10.10.10"
        auth_token: "xxlkjlsdfluwoeirkjlkjsldjjjlkj23423ljlkj"
        ntp_name: "Test-NTP"
        operation: "delete"
        data:
            name: "Test-NTP"
"""


RETURN = r"""
message:
    description: The output generated by the module
    type: str
    returned: always
    sample: "Successfully completed configuration"
status:
    description: True or False depending on the action taken
    type: bool
    returned: always
    sample: True
changed:
    description: True or False if something has been changed or not
    type: bool
    returned: always
    sample: True
"""

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.arubanetworks.afc.plugins.module_utils.afc import (
    instantiate_afc_object,
)
from pyafc.services import ntp


def main():
    module_args = {
        "afc_ip": {"type": "str", "required": True},
        "afc_username": {"type": "str", "required": False},
        "afc_password": {"type": "str", "required": False},
        "auth_token": {"type": "str", "required": False},
        "operation": {"type": "str", "required": False},
        "data": {"type": "dict", "required": True},
    }

    ansible_module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True,
    )

    # Get playbook's arguments
    token = None
    ip = ansible_module.params["afc_ip"]
    if "afc_username" in list(ansible_module.params.keys()):
        username = ansible_module.params["afc_username"]
    if "afc_password" in list(ansible_module.params.keys()):
        password = ansible_module.params["afc_password"]
    if "auth_token" in list(ansible_module.params.keys()):
        token = ansible_module.params["auth_token"]
    data = ansible_module.params["data"]
    operation = ansible_module.params["operation"]

    if token is not None:
        auth_data = {"ip": ip, "auth_token": token}
    else:
        auth_data = {"ip": ip, "username": username, "password": password}

    result = {"changed": False}

    if ansible_module.check_mode:
        ansible_module.exit_json(**result)

    status = False
    changed = False
    message = ""

    afc_instance = instantiate_afc_object(data=auth_data)

    if afc_instance.afc_connected:

        ntp_instance = ntp.Ntp(afc_instance.client, **data)

        if operation == "create":
            message, status, changed = ntp_instance.create_ntp(**data)
        elif operation == "delete":
            message, status, changed = ntp_instance.delete_ntp()
        else:
            message = "Operation not supported - No action taken"
        # Disconnect session if username and password are passed
        if username and password:
            afc_instance.disconnect()

    else:
        message = "Not connected to AFC"

    result["message"] = message
    result["status"] = status
    result["changed"] = changed

    # Exit
    if status:
        ansible_module.exit_json(changed=changed, msg=message)
    else:
        ansible_module.fail_json(changed=changed, msg=message)


if __name__ == "__main__":
    main()
