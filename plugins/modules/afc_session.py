#!/usr/bin/python

# (C) Copyright 2020-2025 Hewlett Packard Enterprise Development LP.
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)


DOCUMENTATION = r"""
---
module: afc_session
short_description: Create or delete session to the HPE ANW Fabric Composer
description: >
    This module creates or deletes a session to the HPE ANW Fabric Composer
version_added: "0.0.1"
options:
    afc_ip:
        description:
        - IP address of the HPE ANW Fabric Composer
        type: str
        required: true
    afc_username:
        description:
        - User account having write permission on the HPE ANW Fabric Composer
        type: str
        required: true
    afc_password:
        description:
        - Password of the user account
        type: str
        required: true
author: Aruba Networks (@ArubaNetworks)
"""


EXAMPLES = r"""
-   name: Create Session
    arubanetworks.afc.afc_session:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
    register: reg_afc_instance

-   name: Capture the auth_token
    ansible.builtin.set_fact:
        auth_token: "{{ reg_afc_instance['auth_token'] }}"

-   name: Create Fabric using token
    arubanetworks.afc.afc_fabric:
        afc_ip: "10.10.10.10"
        auth_token: "{{ auth_token }}"
        fabric_name: "Aruba-Fabric"
        fabric_timezone: "Europe/London"
        operation: "create"
"""


RETURN = r"""
message:
    description: The output generated by the module
    type: str
    returned: always
    sample: "Successfully completed configuration"
status:
    description: True or False depending on the action taken
    type: bool
    returned: always
    sample: True
changed:
    description: True or False if something has been changed or not
    type: bool
    returned: always
    sample: True
headers:
    description: Headers for connection
    type: dict
    returned: always
"""

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.arubanetworks.afc.plugins.module_utils.afc import (
    instantiate_afc_object,
)


def main():
    module_args = {
        "afc_ip": {"type": "str", "required": True},
        "afc_username": {"type": "str", "required": True},
        "afc_password": {"type": "str", "required": True},
    }

    ansible_module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True,
    )

    # Get playbook's arguments
    ip = ansible_module.params["afc_ip"]
    username = ansible_module.params["afc_username"]
    password = ansible_module.params["afc_password"]

    result = {"changed": False}

    if ansible_module.check_mode:
        ansible_module.exit_json(**result)

    status = False
    changed = False
    message = ""
    auth_token = None

    data = {"ip": ip, "username": username, "password": password}

    auth_token = None

    afc_instance = instantiate_afc_object(data=data)

    if afc_instance.client.is_closed is False:
        auth_token = afc_instance.auth_token
        message = "Successfully created afc_instance"
        status = True
        changed = True
    else:
        message = "Unable to create afc_instance"

    # Exit
    if status:
        ansible_module.exit_json(
            changed=changed,
            msg=message,
            auth_token=auth_token,
        )
    else:
        ansible_module.fail_json(changed=changed, msg=message)


if __name__ == "__main__":
    main()
