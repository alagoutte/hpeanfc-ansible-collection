#!/usr/bin/python
# -*- coding: utf-8 -*-

# (C) Copyright 2019-2023 Hewlett Packard Enterprise Development LP.
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = r'''
---
module: afc_evpn
version_added: "0.0.1"
short_description: Create or delete EVPN.
description: >
    This module is used to create and delete EVPN.
options:
    afc_ip:
        description: >
            IP address of the Aruba Fabric Composer.
        type: str
        required: true
    afc_username:
        description:
        - User account having permission to create VRF on the Aruba Fabric Composer
        type: str
        required: false
    afc_password:
        description:
        - Password of the user account
        type: str
        required: false
    auth_token:
        description: >
            Auth token from the create session playbook.
        type: str
        required: false
    fabric_name:
        description: >
            Name of the Fabric.
        type: str
        required: true
    operation:
        description: >
            Operation to be performed with the EVPN, create or delete.
        type: str
        required: true
    vni_data:
        description: >
            VNI Data with system_mac_range, as_number, name_prefix, rt_type, vlans, vni_base and description.
            The values as_number, vlans and the vni_base, though integers need to be represented as string.
        type: dict
        required: true
author: Aruba Networks (@ArubaNetworks)
'''

EXAMPLES = r'''
-   name: Create EVPN
    arubanetworks.afc.afc_evpn:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        fabric_name: "Aruba-Fabric"
        operation: "create"
        vni_data:
            system_mac_range: "MAC Range Name"
            as_number: "65000"
            name_prefix: "Test-EVPN"
            rt_type: "ASN:VNI"
            vlans: "250"
            vni_base: "10000"
            description: "Test EVPN"

-   name: Delete EVPN
    arubanetworks.afc.afc_evpn:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        fabric_name: "Aruba-Fabric"
        operation: "delete"
        vni_data:
            system_mac_range: "MAC Range Name"
            as_number: "65000"
            name_prefix: "Test-EVPN"
            rt_type: "ASN:VNI"
            vlans: "250"
            vni_base: "10000"
            description: "Test EVPN"
'''

RETURN = r'''
message:
    description: The output generated by the module
    type: str
    returned: always
    sample: "Successfully completed configuration"
status:
    description: True or False depending on the action taken
    type: bool
    returned: always
    sample: True
changed:
    description: True or False if something has been changed or not
    type: bool
    returned: always
    sample: True
'''

from pyafc.fabric import fabric
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.arubanetworks.afc.plugins.module_utils.afc import instantiate_afc_object


def main():
    module_args = dict(
        afc_ip=dict(type="str", required=True),
        afc_username=dict(type="str", required=False),
        afc_password=dict(type="str", required=False),
        auth_token=dict(type="str", required=False),
        fabric_name=dict(type="str", required=True),
        operation=dict(type="str", required=True),
        vni_data=dict(type="dict", required=True)
    )

    ansible_module = AnsibleModule(
        argument_spec=module_args, supports_check_mode=True
    )

    # Get playbook's arguments
    token = None
    ip = ansible_module.params["afc_ip"]
    if 'afc_username' in list(ansible_module.params.keys()):
        username = ansible_module.params["afc_username"]
    if 'afc_password' in list(ansible_module.params.keys()):
        password = ansible_module.params["afc_password"]
    if 'auth_token' in list(ansible_module.params.keys()):
        token = ansible_module.params["auth_token"]
    fabric_name = ansible_module.params["fabric_name"]
    operation = ansible_module.params["operation"]
    vni_data = ansible_module.params["vni_data"]
    evpn_name = vni_data['name_prefix']

    if token is not None:
        data = {
            "ip": ip,
            "auth_token": token
        }
    else:
        data = {
            "ip": ip,
            "username": username,
            "password": password
        }

    afc_instance = instantiate_afc_object(data=data)

    result = dict(changed=False)

    if ansible_module.check_mode:
        ansible_module.exit_json(**result)

    if operation == 'create':
        fabric_instance = fabric.Fabric(afc_instance.client, name=fabric_name)
        message, status, changed = fabric_instance.create_evpn(name=evpn_name, **vni_data)
    elif operation == 'delete':
        fabric_instance = fabric.Fabric(afc_instance.client, name=fabric_name)
        message, status, changed = fabric_instance.delete_evpn(name=evpn_name, **vni_data)

    result['message'] = message
    result['status'] = status
    result['changed'] = changed

    # Disconnect session if username and password are passed
    if username and password:
        afc_instance.disconnect()

    # Exit
    if status:
        ansible_module.exit_json(changed=changed, msg=message)
    else:
        ansible_module.fail_json(changed=changed, msg=message)


if __name__ == "__main__":
    main()
