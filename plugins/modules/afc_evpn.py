#!/usr/bin/python

# (C) Copyright 2020-2025 Hewlett Packard Enterprise Development LP.
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)


DOCUMENTATION = r"""
---
module: afc_evpn
version_added: "0.0.1"
short_description: Create or delete EVPN.
description: >
    This module is used to create and delete EVPN.
options:
    afc_ip:
        description: >
            IP address of the HPE ANW Fabric Composer.
        type: str
        required: true
    afc_username:
        description:
        - User account having write permission on the HPE ANW Fabric Composer
        type: str
        required: false
    afc_password:
        description:
        - Password of the user account
        type: str
        required: false
    auth_token:
        description: >
            Auth token from the create session playbook.
        type: str
        required: false
    operation:
        description: >
            Operation to be performed with the EVPN.
        type: str
        choices:
            - create
            - reapply
        required: true
    data:
        description: >
            VNI Data with system_mac_range, as_number, name_prefix, rt_type,
            vlans, vni_base and description.
        type: dict
        suboptions:
            fabric:
                description: Fabric Name
                type: str
                required: true
            vrf:
                description: VRF Name
                type: str
                required: true
            name:
                description: EVPN Workflow Name
                type: str
                required: true
            description:
                description: EVPN Workflow description
                type: str
                required: false
            system_mac_range:
                description: MAC Range used for Router MAC
                type: str
                required: true
            as_number:
                description: AS Number. Required based on selected rt_type.
                type: str
                required: true
            rt_type:
                description: Type of Route Target.
                type: str
                choices:
                    - AUTO
                    - ASN:VNI
                    - ASN:VLAN
                    - ASN:NN
                default: 'AUTO'
                required: false
            vlans:
                description: VLANs to be mapped to EVPN
                type: str
                required: true
            vni_base:
                description: Used to combine with VLAN to form L2VNI
                type: str
                required: true

        required: true
author: Aruba Networks (@ArubaNetworks)
"""

EXAMPLES = r"""
-   name: Create EVPN using username and password
    arubanetworks.afc.afc_evpn:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        operation: "create"
        data:
            fabric: "Aruba-Fabric"
            vrf: "Aruba-VRF"
            name: "Test-EVPN"
            system_mac_range: "MAC Range Name"
            as_number: "65000"
            rt_type: "ASN:VNI"
            vlans: "250"
            vni_base: "10000"
            description: "Test EVPN"

-   name: Delete EVPN using username and password
    arubanetworks.afc.afc_evpn:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        operation: "delete"
        data:
            fabric: "Aruba-Fabric"
            vrf: "Aruba-VRF"
            name: "Test-EVPN"

-   name: Reapply EVPN using username and password
    arubanetworks.afc.afc_evpn:
        afc_ip: "10.10.10.10"
        afc_username: "afc_admin"
        afc_password: "afc_password"
        operation: "reapply"
        data:
            fabric: "Aruba-Fabric"

-   name: Create EVPN using token
    arubanetworks.afc.afc_evpn:
        afc_ip: "10.10.10.10"
        auth_token: "xxlkjlsdfluwoeirkjlkjsldjjjlkj23423ljlkj"
        operation: "create"
        data:
            fabric: "Aruba-Fabric"
            name: "Test-EVPN"
            vrf: "Aruba-VRF"
            system_mac_range: "MAC Range Name"
            as_number: "65000"
            rt_type: "ASN:VNI"
            vlans: "250"
            vni_base: "10000"
            description: "Test EVPN"

-   name: Delete EVPN using token
    arubanetworks.afc.afc_evpn:
        afc_ip: "10.10.10.10"
        auth_token: "xxlkjlsdfluwoeirkjlkjsldjjjlkj23423ljlkj"
        operation: "create"
        data:
            fabric: "Aruba-Fabric"
            vrf: "Aruba-VRF"
            name: "Test-EVPN"

-   name: Reapply EVPN using token
    arubanetworks.afc.afc_evpn:
        afc_ip: "10.10.10.10"
        auth_token: "xxlkjlsdfluwoeirkjlkjsldjjjlkj23423ljlkj"
        operation: "reapply"
        data:
            fabric: "Aruba-Fabric"
"""

RETURN = r"""
message:
    description: The output generated by the module
    type: str
    returned: always
    sample: "Successfully completed configuration"
status:
    description: True or False depending on the action taken
    type: bool
    returned: always
    sample: True
changed:
    description: True or False if something has been changed or not
    type: bool
    returned: always
    sample: True
"""

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.arubanetworks.afc.plugins.module_utils.afc import (
    instantiate_afc_object,
)
from pyafc.fabric import fabric


def main():
    module_args = {
        "afc_ip": {"type": "str", "required": True},
        "afc_username": {"type": "str", "required": False},
        "afc_password": {"type": "str", "required": False},
        "auth_token": {"type": "str", "required": False},
        "operation": {"type": "str", "required": True},
        "data": {"type": "dict", "required": False},
    }

    ansible_module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True,
    )

    # Get playbook's arguments
    token = None
    ip = ansible_module.params["afc_ip"]
    if "afc_username" in list(ansible_module.params.keys()):
        username = ansible_module.params["afc_username"]
    if "afc_password" in list(ansible_module.params.keys()):
        password = ansible_module.params["afc_password"]
    if "auth_token" in list(ansible_module.params.keys()):
        token = ansible_module.params["auth_token"]
    operation = ansible_module.params["operation"]
    data = ansible_module.params["data"]

    if token is not None:
        auth_data = {"ip": ip, "auth_token": token}
    else:
        auth_data = {"ip": ip, "username": username, "password": password}

    result = {"changed": False}

    if ansible_module.check_mode:
        ansible_module.exit_json(**result)

    status = False
    changed = False
    message = ""

    afc_instance = instantiate_afc_object(data=auth_data)

    if afc_instance.afc_connected:

        fabric_instance = fabric.Fabric(
            afc_instance.client,
            name=data["fabric"],
        )

        if fabric_instance.uuid:
            if operation == "create":
                message, status, changed = fabric_instance.create_evpn(**data)
            elif operation == "reapply":
                message, status, changed = fabric_instance.reapply_evpn()
            elif operation == "delete":
                message, status, changed = fabric_instance.delete_evpn(**data)
            else:
                message = "Operation not supported - No action taken"
        else:
            message = "Fabric not found - No action taken"

        # Disconnect session if username and password are passed
        if username and password:
            afc_instance.disconnect()

    else:
        message = "Not connected to AFC"

    result["message"] = message
    result["status"] = status
    result["changed"] = changed

    # Exit
    if status:
        ansible_module.exit_json(changed=changed, msg=message)
    else:
        ansible_module.fail_json(changed=changed, msg=message)


if __name__ == "__main__":
    main()
